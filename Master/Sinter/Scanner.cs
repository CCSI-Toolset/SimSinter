// Generated by TinyPG v1.3 available at www.codeproject.com

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.RegularExpressions;
using System.Xml.Serialization;

namespace sinter.PSE
{
    #region Scanner

    public partial class Scanner
    {
        public string Input;
        public int StartPos = 0;
        public int EndPos = 0;
        public string CurrentFile;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped = new List<Token>(); // tokens that were skipped
        
        private Token LookAheadToken = null;
        private readonly TokenType FileAndLine = default(TokenType);

        public static Dictionary<TokenType, Regex> Patterns;
        private static List<TokenType> Tokens;
        private static List<TokenType> SkipList; // tokens to be skipped

        static Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            Tokens = new List<TokenType>();
            
            SkipList = new List<TokenType>();
            SkipList.Add(TokenType.WHITESPACE);
            SkipList.Add(TokenType.PARAMETER);
            SkipList.Add(TokenType.VARIABLE);
            SkipList.Add(TokenType.SET);
            SkipList.Add(TokenType.ASSIGN);
            SkipList.Add(TokenType.BOUNDRY);
            SkipList.Add(TokenType.DISTRIBUTION_DOMAIN);
            SkipList.Add(TokenType.EQUATION);
            SkipList.Add(TokenType.INITIAL);
            SkipList.Add(TokenType.INITIALISATION_PROCEDURE);
            SkipList.Add(TokenType.INITIALIZATION_PROCEDURE);
            SkipList.Add(TokenType.INITIALSELECTOR);
            SkipList.Add(TokenType.MONITOR);
            SkipList.Add(TokenType.PORT);
            SkipList.Add(TokenType.PORTSET);
            SkipList.Add(TokenType.PRESET);
            SkipList.Add(TokenType.SCHEDULE);
            SkipList.Add(TokenType.SELECTOR);
            SkipList.Add(TokenType.SOLUTIONPARAMETERS);
            SkipList.Add(TokenType.TOPOLOGY);
            SkipList.Add(TokenType.UNIT);
            SkipList.Add(TokenType.STEADY_STATE);
            SkipList.Add(TokenType.COMMENT);
            SkipList.Add(TokenType.MULTILINE_COMMENT);

            regex = new Regex(@"^$", RegexOptions.Compiled);
            Patterns.Add(TokenType.EOF, regex);
            Tokens.Add(TokenType.EOF);

            regex = new Regex(@"\s+", RegexOptions.Compiled);
            Patterns.Add(TokenType.WHITESPACE, regex);
            Tokens.Add(TokenType.WHITESPACE);

            regex = new Regex("PARAMETER", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.PARAMETER, regex);
            Tokens.Add(TokenType.PARAMETER);

            regex = new Regex("VARIABLE", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.VARIABLE, regex);
            Tokens.Add(TokenType.VARIABLE);

            regex = new Regex("SET", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.SET, regex);
            Tokens.Add(TokenType.SET);

            regex = new Regex("ASSIGN", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.ASSIGN, regex);
            Tokens.Add(TokenType.ASSIGN);

            regex = new Regex("BOUNDRY", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.BOUNDRY, regex);
            Tokens.Add(TokenType.BOUNDRY);

            regex = new Regex("DISTRIBUTION_DOMAIN", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.DISTRIBUTION_DOMAIN, regex);
            Tokens.Add(TokenType.DISTRIBUTION_DOMAIN);

            regex = new Regex("EQUATION", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.EQUATION, regex);
            Tokens.Add(TokenType.EQUATION);

            regex = new Regex("INITIAL", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.INITIAL, regex);
            Tokens.Add(TokenType.INITIAL);

            regex = new Regex("INITIALISATION_PROCEDURE", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.INITIALISATION_PROCEDURE, regex);
            Tokens.Add(TokenType.INITIALISATION_PROCEDURE);

            regex = new Regex("INITIALIZATION_PROCEDURE", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.INITIALIZATION_PROCEDURE, regex);
            Tokens.Add(TokenType.INITIALIZATION_PROCEDURE);

            regex = new Regex("INITIALSELECTOR", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.INITIALSELECTOR, regex);
            Tokens.Add(TokenType.INITIALSELECTOR);

            regex = new Regex("MONITOR", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.MONITOR, regex);
            Tokens.Add(TokenType.MONITOR);

            regex = new Regex("PORT", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.PORT, regex);
            Tokens.Add(TokenType.PORT);

            regex = new Regex("PORTSET", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.PORTSET, regex);
            Tokens.Add(TokenType.PORTSET);

            regex = new Regex("PRESET", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.PRESET, regex);
            Tokens.Add(TokenType.PRESET);

            regex = new Regex("SCHEDULE", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.SCHEDULE, regex);
            Tokens.Add(TokenType.SCHEDULE);

            regex = new Regex("SELECTOR", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.SELECTOR, regex);
            Tokens.Add(TokenType.SELECTOR);

            regex = new Regex("SOLUTIONPARAMETERS", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.SOLUTIONPARAMETERS, regex);
            Tokens.Add(TokenType.SOLUTIONPARAMETERS);

            regex = new Regex("TOPOLOGY", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.TOPOLOGY, regex);
            Tokens.Add(TokenType.TOPOLOGY);

            regex = new Regex("UNIT", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.UNIT, regex);
            Tokens.Add(TokenType.UNIT);

            regex = new Regex("STEADY_STATE", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.STEADY_STATE, regex);
            Tokens.Add(TokenType.STEADY_STATE);

            regex = new Regex("AS", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.AS, regex);
            Tokens.Add(TokenType.AS);

            regex = new Regex("FOREIGN_OBJECT", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.FOREIGN_OBJECT, regex);
            Tokens.Add(TokenType.FOREIGN_OBJECT);

            regex = new Regex("REAL", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.REAL, regex);
            Tokens.Add(TokenType.REAL);

            regex = new Regex("INTEGER", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.INTEGER, regex);
            Tokens.Add(TokenType.INTEGER);

            regex = new Regex("LOGICAL", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.BOOLEAN, regex);
            Tokens.Add(TokenType.BOOLEAN);

            regex = new Regex("ARRAY", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.ARRAY, regex);
            Tokens.Add(TokenType.ARRAY);

            regex = new Regex("OF", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.OF, regex);
            Tokens.Add(TokenType.OF);

            regex = new Regex("WITHIN", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.WITHIN, regex);
            Tokens.Add(TokenType.WITHIN);

            regex = new Regex("DO", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.DO, regex);
            Tokens.Add(TokenType.DO);

            regex = new Regex("TO", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.TO, regex);
            Tokens.Add(TokenType.TO);

            regex = new Regex("END", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.END, regex);
            Tokens.Add(TokenType.END);

            regex = new Regex("FOR", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.FOR, regex);
            Tokens.Add(TokenType.FOR);

            regex = new Regex("WHILE", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.WHILE, regex);
            Tokens.Add(TokenType.WHILE);

            regex = new Regex("DEFAULT", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.DEFAULT, regex);
            Tokens.Add(TokenType.DEFAULT);

            regex = new Regex(@"\(", RegexOptions.Compiled);
            Patterns.Add(TokenType.LPAREN, regex);
            Tokens.Add(TokenType.LPAREN);

            regex = new Regex(@"\)", RegexOptions.Compiled);
            Patterns.Add(TokenType.RPAREN, regex);
            Tokens.Add(TokenType.RPAREN);

            regex = new Regex(@"[-+]?[0-9]*\.?[0-9]+(E[-+]?[0-9]+)?", RegexOptions.Compiled);
            Patterns.Add(TokenType.NUMBER, regex);
            Tokens.Add(TokenType.NUMBER);

            regex = new Regex(@"""[^""\\]*(?:\\.[^""\\]*)*""", RegexOptions.Compiled);
            Patterns.Add(TokenType.STRING, regex);
            Tokens.Add(TokenType.STRING);

            regex = new Regex(@"(?!END)[a-zA-Z_][a-zA-Z0-9_\.]*", RegexOptions.Compiled | RegexOptions.IgnoreCase);
            Patterns.Add(TokenType.IDENTIFIER, regex);
            Tokens.Add(TokenType.IDENTIFIER);

            regex = new Regex(@"[A-Za-z0-9_]*", RegexOptions.Compiled);
            Patterns.Add(TokenType.SELECTORSTRING, regex);
            Tokens.Add(TokenType.SELECTORSTRING);

            regex = new Regex(",", RegexOptions.Compiled);
            Patterns.Add(TokenType.COMMA, regex);
            Tokens.Add(TokenType.COMMA);

            regex = new Regex(";", RegexOptions.Compiled);
            Patterns.Add(TokenType.SEMICOLON, regex);
            Tokens.Add(TokenType.SEMICOLON);

            regex = new Regex("(:=|=)", RegexOptions.Compiled);
            Patterns.Add(TokenType.ASSIGNOP, regex);
            Tokens.Add(TokenType.ASSIGNOP);

            regex = new Regex(@"(\+|-)", RegexOptions.Compiled);
            Patterns.Add(TokenType.PLUSMINUS, regex);
            Tokens.Add(TokenType.PLUSMINUS);

            regex = new Regex(@"\*|/", RegexOptions.Compiled);
            Patterns.Add(TokenType.MULTDIV, regex);
            Tokens.Add(TokenType.MULTDIV);

            regex = new Regex(@"\^", RegexOptions.Compiled);
            Patterns.Add(TokenType.EXPONENT, regex);
            Tokens.Add(TokenType.EXPONENT);

            regex = new Regex(@"#.*\n", RegexOptions.Compiled);
            Patterns.Add(TokenType.COMMENT, regex);
            Tokens.Add(TokenType.COMMENT);

            regex = new Regex(@"{[^}]*}", RegexOptions.Compiled);
            Patterns.Add(TokenType.MULTILINE_COMMENT, regex);
            Tokens.Add(TokenType.MULTILINE_COMMENT);


        }

        public void Init(string input)
        {
            Init(input, "");
        }

        public void Init(string input, string fileName)
        {
            this.Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentFile = fileName;
            CurrentLine = 1;
            CurrentColumn = 1;
            CurrentPosition = 0;
            LookAheadToken = null;
        }

        public Token GetToken(TokenType type)
        {
            Token t = new Token(this.StartPos, this.EndPos);
            t.Type = type;
            return t;
        }

         /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = LookAhead(expectedtokens); // temporarely retrieve the lookahead
            LookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            CurrentLine = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
            CurrentFile = tok.File;
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = StartPos;
            int endpos = EndPos;
            int currentline = CurrentLine;
            string currentFile = CurrentFile;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (LookAheadToken != null 
                && LookAheadToken.Type != TokenType._UNDETERMINED_ 
                && LookAheadToken.Type != TokenType._NONE_) return LookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = Tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(SkipList);
            }

            do
            {

                int len = -1;
                TokenType index = (TokenType)int.MaxValue;
                string input = Input.Substring(startpos);

                tok = new Token(startpos, endpos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    Regex r = Patterns[scantokens[i]];
                    Match m = r.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len )))
                    {
                        len = m.Length;
                        index = scantokens[i];  
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos == tok.EndPos)
                {
                    if (tok.StartPos < Input.Length)
                        tok.Text = Input.Substring(tok.StartPos, 1);
                    else
                        tok.Text = "EOF";
                }

                // Update the line and column count for error reporting.
                tok.File = currentFile;
                tok.Line = currentline;
                if (tok.StartPos < Input.Length)
                    tok.Column = tok.StartPos - Input.LastIndexOf('\n', tok.StartPos);

                if (SkipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    endpos = tok.EndPos;
                    currentline = tok.Line + (tok.Text.Length - tok.Text.Replace("\n", "").Length);
                    currentFile = tok.File;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }

                // Check to see if the parsed token wants to 
                // alter the file and line number.
                if (tok.Type == FileAndLine)
                {
                    var match = Patterns[tok.Type].Match(tok.Text);
                    var fileMatch = match.Groups["File"];
                    if (fileMatch.Success)
                        currentFile = fileMatch.Value.Replace("\\\\", "\\");
                    var lineMatch = match.Groups["Line"];
                    if (lineMatch.Success)
                        currentline = int.Parse(lineMatch.Value, NumberStyles.Integer, CultureInfo.InvariantCulture);
                }
            }
            while (SkipList.Contains(tok.Type));

            LookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    public enum TokenType
    {

            //Non terminal tokens:
            _NONE_  = 0,
            _UNDETERMINED_= 1,

            //Non terminal tokens:
            SectionKeywords= 2,
            UserType= 3,
            TypeName= 4,
            SelectorDef= 5,
            ArrayDef= 6,
            ScalarDef= 7,
            VariableDef= 8,
            Assignment= 9,
            ArrayIndex= 10,
            ArrayIndexBlock= 11,
            VariableRef= 12,
            VariableExpr= 13,
            ForBlock= 14,
            WithinBlock= 15,
            Expr    = 16,
            Start   = 17,
            BadId   = 18,
            AddExpr = 19,
            MultExpr= 20,
            ExponentExpr= 21,
            Atom    = 22,

            //Terminal tokens:
            EOF     = 23,
            WHITESPACE= 24,
            PARAMETER= 25,
            VARIABLE= 26,
            SET     = 27,
            ASSIGN  = 28,
            BOUNDRY = 29,
            DISTRIBUTION_DOMAIN= 30,
            EQUATION= 31,
            INITIAL = 32,
            INITIALISATION_PROCEDURE= 33,
            INITIALIZATION_PROCEDURE= 34,
            INITIALSELECTOR= 35,
            MONITOR = 36,
            PORT    = 37,
            PORTSET = 38,
            PRESET  = 39,
            SCHEDULE= 40,
            SELECTOR= 41,
            SOLUTIONPARAMETERS= 42,
            TOPOLOGY= 43,
            UNIT    = 44,
            STEADY_STATE= 45,
            AS      = 46,
            FOREIGN_OBJECT= 47,
            REAL    = 48,
            INTEGER = 49,
            BOOLEAN = 50,
            ARRAY   = 51,
            OF      = 52,
            WITHIN  = 53,
            DO      = 54,
            TO      = 55,
            END     = 56,
            FOR     = 57,
            WHILE   = 58,
            DEFAULT = 59,
            LPAREN  = 60,
            RPAREN  = 61,
            NUMBER  = 62,
            STRING  = 63,
            IDENTIFIER= 64,
            SELECTORSTRING= 65,
            COMMA   = 66,
            SEMICOLON= 67,
            ASSIGNOP= 68,
            PLUSMINUS= 69,
            MULTDIV = 70,
            EXPONENT= 71,
            COMMENT = 72,
            MULTILINE_COMMENT= 73
    }

    public class Token
    {
        private string file;
        private int line;
        private int column;
        private int startpos;
        private int endpos;
        private string text;
        private object value;

        // contains all prior skipped symbols
        private List<Token> skipped;

        public string File { 
            get { return file; } 
            set { file = value; }
        }

        public int Line { 
            get { return line; } 
            set { line = value; }
        }

        public int Column {
            get { return column; } 
            set { column = value; }
        }

        public int StartPos { 
            get { return startpos;} 
            set { startpos = value; }
        }

        public int Length { 
            get { return endpos - startpos;} 
        }

        public int EndPos { 
            get { return endpos;} 
            set { endpos = value; }
        }

        public string Text { 
            get { return text;} 
            set { text = value; }
        }

        public List<Token> Skipped { 
            get { return skipped;} 
            set { skipped = value; }
        }
        public object Value { 
            get { return value;} 
            set { this.value = value; }
        }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            startpos = start;
            endpos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < startpos) startpos = token.StartPos;
            if (token.EndPos > endpos) endpos = token.EndPos;
        }

        public override string ToString()
        {
            if (Text != null)
                return Type.ToString() + " '" + Text + "'";
            else
                return Type.ToString();
        }
    }

    #endregion
}
